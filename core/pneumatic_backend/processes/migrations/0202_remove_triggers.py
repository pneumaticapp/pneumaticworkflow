# Generated by Django 2.2 on 2024-02-06 17:47
# pylint:disable=anomalous-backslash-in-string
from django.db import migrations


class Migration(migrations.Migration):

    dependencies = [
        ('processes', '0201_recreate_search_content'),
    ]

    operations = [
        # remove incorrect functions
        migrations.RunSQL(sql="DROP FUNCTION IF EXISTS tsvector_update_trigger_on_workflow CASCADE"),
        migrations.RunSQL(sql="DROP FUNCTION IF EXISTS tsvector_update_trigger_on_process CASCADE"),
        migrations.RunSQL(sql="DROP FUNCTION IF EXISTS tsvector_update_trigger_on_task CASCADE"),
        migrations.RunSQL(sql="DROP FUNCTION IF EXISTS tsvector_update_trigger_on_taskfield CASCADE"),
        migrations.RunSQL(sql="DROP FUNCTION IF EXISTS tsvector_update_trigger_on_fileattachment CASCADE"),

        # remove deprecated triggers
        migrations.RunSQL(sql="DROP TRIGGER IF EXISTS process_ins ON processes_workflow"),
        migrations.RunSQL(sql="DROP TRIGGER IF EXISTS workflow_ins ON processes_workflow"),
        migrations.RunSQL(sql="DROP TRIGGER IF EXISTS processes_workflowevent_ins ON processes_workflowevent"),
        migrations.RunSQL(sql="DROP TRIGGER IF EXISTS taskfield_ins ON processes_taskfield"),
        migrations.RunSQL(sql="DROP TRIGGER IF EXISTS tasks_ins ON processes_workflow"),
        migrations.RunSQL(sql="DROP TRIGGER IF EXISTS tasks_ins ON processes_task"),
        migrations.RunSQL(sql="DROP TRIGGER IF EXISTS fileattachments_ins ON processes_fileattachment"),
        migrations.RunSQL(sql="DROP TRIGGER IF EXISTS kickoffvalue_ins ON processes_kickoffvalue"),
        migrations.RunSQL(sql="DROP TRIGGER IF EXISTS processes_fileattachment_ins ON processes_fileattachment"),

        # create prepare search text func
        migrations.RunSQL("""
             -- Union text parts and excluding unwanted lexemes (www, <, >) from the text
             CREATE OR REPLACE FUNCTION prepare_search_content(TEXT default '', TEXT default '', TEXT default '', TEXT default '')
             RETURNS TEXT AS $$ 
             BEGIN
               RETURN REGEXP_REPLACE(CONCAT($1, ' ', $2, ' ', $3, ' ', $4), 'http(s)?:\\\\(www\.)?|www\.|\<|\>', '', 'g');
             END;
             $$ LANGUAGE plpgsql;
        """),

        # Workflow trigger
        migrations.RunSQL("""
             CREATE OR REPLACE FUNCTION update_process_workflow_search_content()
             RETURNS trigger AS 
             $BODY$
               BEGIN
                 new.search_content = to_tsvector(
                     'pg_catalog.english',
                     prepare_search_content(
                       new.name,
                       new.legacy_template_name,
                       new.description
                     )
                 );
                 RETURN new;
               END;
             $BODY$ LANGUAGE plpgsql;
        """),
        migrations.RunSQL(sql="""
             CREATE TRIGGER workflow_ins BEFORE INSERT OR UPDATE ON processes_workflow 
             FOR EACH ROW EXECUTE FUNCTION update_process_workflow_search_content()
        """),

        # WorkflowEvent trigger
        migrations.RunSQL("""
             CREATE OR REPLACE FUNCTION update_process_workflowevent_search_content()
             RETURNS trigger AS
             $BODY$
               BEGIN
                 new.search_content = to_tsvector('pg_catalog.english', prepare_search_content(new.clear_text));
                 RETURN new;
               END;
             $BODY$
             LANGUAGE plpgsql;
        """),
        migrations.RunSQL("""
             CREATE TRIGGER processes_workflowevent_ins 
             BEFORE INSERT OR UPDATE ON processes_workflowevent 
                 FOR EACH ROW 
                 WHEN (NEW.type=5)
                 EXECUTE PROCEDURE update_process_workflowevent_search_content()
        """),

        # TaskField trigger
        migrations.RunSQL("""
             CREATE OR REPLACE FUNCTION update_processes_taskfield_search_content()
             RETURNS trigger AS
             $BODY$
               BEGIN
                 new.search_content = to_tsvector('pg_catalog.english', prepare_search_content(new.clear_value));
                 RETURN new;
               END;
             $BODY$
             LANGUAGE plpgsql;
        """),
        migrations.RunSQL("""
             CREATE TRIGGER taskfield_ins BEFORE INSERT OR UPDATE ON processes_taskfield
             FOR EACH ROW 
             WHEN (NEW.type != 'file')
             EXECUTE PROCEDURE update_processes_taskfield_search_content()    
        """),

        # Task trigger
        migrations.RunSQL("""
             CREATE OR REPLACE FUNCTION update_processes_task_search_content()
             RETURNS trigger AS
             $BODY$
               BEGIN
                 new.search_content = to_tsvector('pg_catalog.english', prepare_search_content(new.clear_description, new.name));
                 RETURN new;
               END;
             $BODY$
             LANGUAGE plpgsql;
        """),
        migrations.RunSQL("""
             CREATE TRIGGER tasks_ins BEFORE INSERT OR UPDATE ON processes_task 
             FOR EACH ROW EXECUTE PROCEDURE update_processes_task_search_content()
        """),

        # KickoffValue trigger
        migrations.RunSQL("""
             CREATE OR REPLACE FUNCTION update_processes_kickoffvalue_search_content()
             RETURNS trigger AS
             $BODY$
               BEGIN
                 new.search_content = to_tsvector('pg_catalog.english', prepare_search_content(new.clear_description));
                 RETURN new;
               END;
             $BODY$
             LANGUAGE plpgsql;
        """),
        migrations.RunSQL("""
             CREATE TRIGGER kickoffvalue_ins BEFORE INSERT OR UPDATE ON processes_kickoffvalue 
             FOR EACH ROW EXECUTE PROCEDURE update_processes_kickoffvalue_search_content()
        """),

        # FileAttachment trigger
        migrations.RunSQL("""
             CREATE OR REPLACE FUNCTION update_process_fileattachment_search_content()
             RETURNS trigger AS
             $BODY$
               BEGIN
                 new.search_content = to_tsvector('pg_catalog.english', prepare_search_content(new.name));
                 RETURN new;
               END;
             $BODY$
             LANGUAGE plpgsql;
         """),
        migrations.RunSQL("""
             CREATE TRIGGER processes_fileattachment_ins BEFORE INSERT OR UPDATE ON processes_fileattachment
             FOR EACH ROW EXECUTE PROCEDURE update_process_fileattachment_search_content()
        """),
    ]
