# Generated by Django 2.2.17 on 2021-03-17 12:53

from django.db import migrations, models
import django.db.models.deletion
import pneumatic_backend.processes.models.mixins
from pneumatic_backend.generics.mixins.models import SoftDeleteMixin


class Migration(migrations.Migration):

    dependencies = [
        ('processes', '0109_populate_selection_api_name'),
    ]

    operations = [
        migrations.CreateModel(
            name='Condition',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_deleted', models.BooleanField(default=False)),
                ('action', models.CharField(choices=[('skip_task', 'Skip task'), ('start_task', 'Start task'), ('end_process', 'End process')], max_length=20)),
                ('order', models.PositiveSmallIntegerField(default=0)),
                ('template_id', models.IntegerField(null=True)),
                ('task', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='conditions', to='processes.Task')),
                ('api_name', models.CharField(max_length=200)),
            ],
            options={
                'abstract': False,
            },
            bases=(SoftDeleteMixin, models.Model),
        ),
        migrations.CreateModel(
            name='ConditionTemplate',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_deleted', models.BooleanField(default=False)),
                ('action', models.CharField(choices=[('skip_task', 'Skip task'), ('start_task', 'Start task'), ('end_process', 'End process')], max_length=20)),
                ('order', models.PositiveSmallIntegerField(default=0)),
                ('task', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='conditions', to='processes.TaskWorkflow')),
                ('api_name', models.CharField(max_length=200)),
            ],
            options={
                'abstract': False,
            },
            bases=(SoftDeleteMixin, models.Model),
        ),
        migrations.CreateModel(
            name='RuleTemplate',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_deleted', models.BooleanField(default=False)),
                ('condition', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='rules', to='processes.ConditionTemplate')),
                ('api_name', models.CharField(max_length=200)),
            ],
            options={
                'abstract': False,
            },
            bases=(SoftDeleteMixin, models.Model),
        ),
        migrations.CreateModel(
            name='Rule',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_deleted', models.BooleanField(default=False)),
                ('template_id', models.IntegerField(null=True)),
                ('condition', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='rules', to='processes.Condition')),
                ('api_name', models.CharField(max_length=200)),
            ],
            options={
                'abstract': False,
            },
            bases=(SoftDeleteMixin, models.Model),
        ),
        migrations.CreateModel(
            name='PredicateTemplate',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_deleted', models.BooleanField(default=False)),
                ('operator', models.CharField(choices=[('equal', 'Equal'), ('not_equals', 'Not equal'), ('exists', 'Exists'), ('not_exists', 'Not exists'), ('contains', 'Contains'), ('not_contains', 'Not contains'), ('more_than', 'More than'), ('less_than', 'Less than')], max_length=30)),
                ('field', models.CharField(max_length=200)),
                ('field_type', models.CharField(choices=[('string', 'String'), ('text', 'Text'), ('radio', 'Radio'), ('checkbox', 'Checkbox'), ('date', 'Date'), ('url', 'Url'), ('dropdown', 'Dropdown'), ('file', 'File'), ('user', 'User')], max_length=20)),
                ('value', models.CharField(max_length=200, null=True)),
                ('rule', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='predicates', to='processes.RuleTemplate')),
                ('api_name', models.CharField(max_length=200)),
            ],
            options={
                'abstract': False,
            },
            bases=(SoftDeleteMixin, pneumatic_backend.processes.enums.FieldType, models.Model),
        ),
        migrations.CreateModel(
            name='Predicate',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_deleted', models.BooleanField(default=False)),
                ('operator', models.CharField(choices=[('equal', 'Equal'), ('not_equals', 'Not equal'), ('exists', 'Exists'), ('not_exists', 'Not exists'), ('contains', 'Contains'), ('not_contains', 'Not contains'), ('more_than', 'More than'), ('less_than', 'Less than')], max_length=30)),
                ('field', models.CharField(max_length=200)),
                ('field_type', models.CharField(choices=[('string', 'String'), ('text', 'Text'), ('radio', 'Radio'), ('checkbox', 'Checkbox'), ('date', 'Date'), ('url', 'Url'), ('dropdown', 'Dropdown'), ('file', 'File'), ('user', 'User')], max_length=20)),
                ('value', models.CharField(max_length=200, null=True)),
                ('template_id', models.IntegerField(null=True)),
                ('rule', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='predicates', to='processes.Rule')),
                ('api_name', models.CharField(max_length=200)),
            ],
            options={
                'abstract': False,
            },
            bases=(SoftDeleteMixin, pneumatic_backend.processes.enums.FieldType, models.Model),
        ),
    ]
